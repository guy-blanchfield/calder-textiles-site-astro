---
import Preloader from "../components/Preloader.astro";
import Header from "../components/Header.astro";
import Main from "../components/Main.astro";
import Footer from "../components/Footer.astro";

// global reset, not sure we need this, bootstrap has a reset
import "../styles/reset.css";

// bootstrap custom sass
import "../styles/bootstrap-custom.scss";

// global custom styles
// NB has to come after bootstrap, otherwise some things might get overwritten by bootstrap styles
import "../styles/global.css";

// bootstrap custom js
// import bootstrap from "../js/bootstrap-custom.js";

// test sass
// import "../styles/test-sass.scss";

// the AOS stuff is in js/setup-aos.js
// and added in with a script src (see below after the html)

// --------------------------------------------------------------------------

/*

reminder to investigate the style is:inline content-wrapper and the 
script is:inline content-wrapper add class hidden - do we really need both?
 (provisional answer: yes!)

also see the codepen on this page: https://css-tricks.com/how-to-load-fonts-in-a-way-that-fights-fout-and-makes-lighthouse-happy/
for a more robust use of the fonts.check method (it needs a fallback)

*/

// --------------------------------------------------------------------------

export interface Props {
	title: string;
	bodyClass?: string;
	heroImageBase?: string; // so we can preload the lqip for the hero
	sectionImageBase?: string; // so we can preload the lqip for the pictureSection (probably won't tbh)
	heroVideo?: boolean; // so we can set the portrait lqip conditionally (see)
	// bodyBgColour?: string;
}

// probably set isLoaded true unless we specifically set it false
// i.e. when we want to use a preloader

// set bodyBgColour to default to actual white, rather than the var --white
// just to be on the safe side, maybe reconsider in future
// const { title, bodyClass = '', bodyBgColour = '0 0% 100%' } = Astro.props;

// probably won't use sectionImageBase bc the section image won't affect the LCP,
// it might even get lazy loaded depending on the browser

// let's define a heroVideo prop so we've got a conditional for the portrait lqip
// (there's no portrait version of the video, hence no protrait lqip for the video placeholder)
// we'll only pass it if it's true, it'll default to false)

const { title, bodyClass = "", heroImageBase = "", sectionImageBase = "", heroVideo = false } = Astro.props;

// create the image paths for the preloads
let heroImagePreloadPath: string;
let heroImagePortraitPreloadPath: string;
let sectionImagePreloadPath: string;
let sectionImagePortraitPreloadPath: string;
if (heroImageBase) {
	heroImagePreloadPath = `/images/${heroImageBase}-lqip.jpg`;
	heroImagePortraitPreloadPath = `/images/${heroImageBase}-portrait-lqip.jpg`;
}

if (sectionImageBase) {
	sectionImagePreloadPath = `/images/${sectionImageBase}-lqip.jpg`;
	sectionImagePortraitPreloadPath = `/images/${sectionImageBase}-portrait-lqip.jpg`;
}
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta
			name="description"
			content="Calder Textiles is one of the UK's foremost woollen yarn spinners with a world-wide reputation for excellence."
		/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />

		<!-- development site only!!!!!! -->
		<meta name="robots" content="noindex" />

		<!-- 
		<link
			href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
			rel="stylesheet"
			integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
			crossorigin="anonymous"
		/>
		-->

		<!-- bootstrap icons is a separate cdn link -->
		<!-- don't think we're using any bootstrap icons -->
		<!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"> -->

		<!-- google fonts - hopefully redundant as we're now preventing maps from downloading fonts -->
		<!-- <link rel="preconnect" href="https://fonts.googleapis.com" /> -->
		<!-- <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /> -->

		<!-- <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville&display=swap" rel="stylesheet"> -->
		<!-- <link href="https://fonts.googleapis.com/css2?family=Baskervville&display=swap" rel="stylesheet"> -->
		<!-- keep this link in for now, but probably going to go wth the bootstrap system ui stack -->
		<!-- NB google fonts automatically supplies regular, so weights and styles only need to be specified if you want more than regular  -->
		<!-- <link href="https://fonts.googleapis.com/css2?family=Martel&display=swap" rel="stylesheet"> -->

		<!-- preloading the locally hosted fonts (@font-face in global.css) -->
		<!-- only preload woff2 fonts, otherwise browser will download both regardless, all mobile broswers will support woff2 -->
		<link rel="preload" href="/fonts/librebaskerville-regular-webfont.woff2" as="font" type="font/woff2" crossorigin />

		<!-- now using system font stack instead of tex gyre heros -->
		<!-- <link rel="preload" href="/fonts/texgyreheros-regular-webfont.woff2" as="font" type="font/woff2" crossorigin /> -->
		<!-- <link rel="preload" href="/fonts/texgyreheros-bold-webfont.woff2" as="font" type="font/woff2" crossorigin /> -->

		<!-- preload lqip versions of hero image and picture section image if necessary -->
		{
			heroImageBase && (
				<>
					<link
						rel="preload"
						media="(orientation: landscape)"
						as="image"
						href={heroImagePreloadPath}
						fetchpriority="high"
					/>
				</>
			)
		}

		{
			heroImageBase && !heroVideo && (
				<link
					rel="preload"
					media="(orientation: portrait)"
					as="image"
					href={heroImagePortraitPreloadPath}
					fetchpriority="high"
				/>
			)
		}

		{
			sectionImageBase && (
				<>
					<link
						rel="preload"
						media="(orientation: landscape)"
						as="image"
						href={sectionImagePreloadPath}
						fetchpriority="high"
					/>

					<link
						rel="preload"
						media="(orientation: portrait)"
						as="image"
						href={sectionImagePortraitPreloadPath}
						fetchpriority="high"
					/>
				</>
			)
		}

		<!-- <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" /> -->

		<!-- icon can't use rel=preload -->
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<!-- <script type="module" src="../js/bootstrap-custom.js"></script> -->
		<!-- cdn scripts -->

		<!-- polyfill probably only required for ie support for google maps javascript api -->
		<!-- this probably needs to be is:inline, because of the query parameter -->
		<!-- and probably stick a defer on it while we're at it -->
		<script is:inline src="https://polyfill.io/v3/polyfill.min.js?features=default" defer></script>

		<!-- same goes for the bootstrap js -->
		<!-- bootstrap js -->
		<!-- only required for the nav expand collapse, so consider doing this with a dedicated script -->
		<!-- doesn't make much difference to lighthouse performance score though -->

		<!-- NB!! don't try to use individual bootstrap js modules - it is a nightmare -->
		<!-- first you need to call all the utils, then all the dom, then the modules, and even then it'll probably want popper! -->
		<!-- CDN is the way to go, seriously -->

		<!-- Or consider replacing the bootstrap nav with custom js and css -->
		<!--
		<script
			is:inline
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
			integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
			crossorigin="anonymous"
			defer
		></script>
		-->

		<title>{title}</title>
	</head>

	<body class:list={bodyClass}>
		<!-- to hide content until scripts have loaded -->
		<!-- use an inline script (i.e. non-deferred) to set the hidden class -->
		<!-- so we can test for the preloadComplete session storage key -->

		<!-- preloader has to be outside the content-wrapper duh! -->
		<Preloader />
		<!-- try inlining the visibility rule here - nope -->
		<div class="content-wrapper">
			<Header />
			<!-- put any css to control min-height and flex-grow of body, main, header and footer in global.css -->
			<!-- don't try to do it in the markup with bootstrap, seriously -->
			<Main>
				<slot />
			</Main>
			<Footer />
		</div>
		<noscript
			>JavaScript is currently disabled. This site requires JavaScript to function correctly. Please enable JavaScript
			in your browser.</noscript
		>
	</body>
</html>

<!-- inline script (i.e. non-deferred) to set the hidden class -->
<!-- so we can test for the preloadComplete session storage key -->
<script is:inline>
	// sessionStorage preloadComplete is set in Preloader handleWindowLoad function

	if (!sessionStorage.getItem("preloadComplete")) {
		// is:inline scripts are excluded from the esbuild console drop so comment these out
		// console.log(`inline script from Layout.astro is adding hidden class to content-wrapper`);
		document.querySelector(".content-wrapper").classList.add("hidden");
	} // else {
	// console.log(`inline script from Layout.astro is NOT adding hidden class to content-wrapper`);
	// }
</script>

<!-- seems a bit hacky but this is the only way it seems to work in astro -->
<!-- see https://github.com/michalsnik/aos/issues/815#issuecomment-1500056742 -->
<!-- don't worry about lighthouse performance in the dev version build version takes care of it -->
<script src="../js/setup-aos.js"></script>

<!-- <style define:vars={{bodyBgColour}}> -->

<!-- inline style here to hide the content-wrapper until the rest of the css is loaded  -->
<!-- remember, for this to work the rule to to override it needs an !important -->
<style is:inline>
	.content-wrapper {
		visibility: hidden;
	}
</style>
<style>
	/* so the layout component can receive a prop for background-color */
	/* it'll default to white */

	/* body {
    background-color: hsl(var(--bodyBgColour));
} */

	/* .body-test-bg {
    
} */

	/* script will add this class if url has a hash in it on loading */
	/* so it doesn't smooth scroll on linking to a new page with a hash */
	/* but still smooth scrolls for within page anchor links */
	/* it gets added to html tag, that's where bootstrap is setting scroll-behaviour: smooth */

	/* NB this didn't work :( */
	/* about us page content fade up was still stuttery on linking to #aboutus from another page */
	.scroll-auto {
		scroll-behavior: auto;
	}

	.content-wrapper {
		/* set visibility to visible once this css has loaded */
		/* !important here is necessary */
		visibility: visible !important;

		/* replaces stuff on body to get the content to stretch to fill the window */

		/* vh fallback for browsers that don't support svh */
		min-height: 100vh;
		min-height: 100svh;

		display: flex;
		flex-direction: column;
	}

	@media (max-width: 768px) {
		.body-aboutus {
			background: none;
		}
	}
</style>
