---
// what props will we need for the video?

// imageBase can be used to create the filename for 2 sources
// call the prop 'videoBase' but it takes the imageBase that gets
// drilled through Hero from whichever page calls it
// probably do an mp4 and webm

// no alt required for video

//  use PictureClasses for video class

// maybe we'll need props for autoplay, loop, probably not muted

export interface Props {
	videoBase: string;
	videoAutoplay?: string;
	pictureClasses?: string; // e.g. hero__picture
}

const { videoBase, videoAutoplay = "true", pictureClasses = "" } = Astro.props;

const videoSourcePart = `/video/${videoBase}`;
// const videoSourceWebm = `/video/${videoBase}-1080p.webm`;
// const videoSourceMp4 = `/video/${videoBase}-1080p.mp4`;

// we only need a background image for video if it's mobile (<768)
// so the background image only needs to be about 768 width, use the 960x540 for now

// not sure how the hero's gonna look on mobile yet, aspect-wise

// not doing the large backgound image, but let's try the 20px blurred image thing
// just so there's not a big blank space while the video loads
// doesn't need to be an imageset, just a single image
const backgroundImage = `url(/images/${videoBase}-20x11.jpg)`;
// const backgroundImageSet = `url(/images/${videoBase}-960x540.webp) type("image/webp"), url(/images/${videoBase}-960x540.jpg) type("image/jpeg")`;
// const backgroundImageSet = `url(/images/${videoBase}-1920x1088.webp) type("image/webp"), url(/images/${videoBase}-960x540.jpg) type("image/jpeg")`;
---

<!-- NB autoplay getting set with js below, leave it off here --><!-- preload=none will stop browser downloading any part of the video unless it has to --><!-- i.e. when autoplay is set by the js -->
<div class="video-container">
	<video class="video-element" data-source={videoSourcePart} data-autoplay={videoAutoplay} muted loop playsinline>
		<!-- <source src={videoSourceMdWebm} type="video/webm" /> -->
		<!-- <source src={videoSourceMp4} type="video/mp4" /> -->

		<p>Your browser doesn't support HTML video.</p>
	</video>
</div>

<script>
	// given that this script will run regardless of the conditional reneder in Hero component
	// and there's quite a lot of it,
	// consider putting all of it inside a condition

	// something like:
	// (yeah that works!)
	if (document.querySelector(".video-element")) {
		console.log(`video component script actually running!!`);
		// how to display different sized video according to window size
		// ideas?!
		// because autoplay is set to off to start with
		// it should be possible to write multiple video tags
		// have most hidden in css, but use media queries to show the appropriate video

		// then use a window.innerWidth in the autoplay function to target the right video element
		// maybe move the const declaration inside the function

		// use the bootstrap breakpoints to label the elements (see above)

		//  might need a on resize function

		// from https://www.smashingmagazine.com/2021/02/optimizing-video-size-quality/
		// to stop video loading at all if it's mobile
		// hopefully will just show the background instead

		const windowWidth: number = window.innerWidth;
		// const videoContainer: HTMLElement = document.querySelector(".video-container");
		const videoElement: HTMLVideoElement = document.querySelector(".video-element");
		// const altVideoElement: Element = document.querySelector('.video-element');
		// this script seems to be running even on non video pages so put assign videoSrc conditionally for now
		const videoSrcPrt = videoElement?.dataset.source;
		// let queryClass: string;
		let videoSource: string;
		let videoPixels: string;
		let videoExt: string;

		// 360p was a bit crappy even at 400vw
		// if (windowWidth < 500) {
		// 	videoPixels = "360p";
		// } else
		if (windowWidth < 992) {
			// queryClass = '.video-element--md';
			videoPixels = "540p";
		} else if (windowWidth < 1200) {
			// queryClass = '.video-element--lg';
			videoPixels = "720p";
		} else {
			// queryClass = '.video-element--xl';
			videoPixels = "1080p";
		}

		console.log(`videoPixels: ${videoPixels}`);
		console.log(`Canplaytype(): ${typeof videoElement?.canPlayType}`);
		// with codec not specified, logs "maybe" on firefox, chrome, edge
		console.log(`Can play webm: ${videoElement?.canPlayType("video/webm")}`);
		// with codec specified, logs "probably" on firefox, chrome, edge
		console.log(`Can play webm codecs=vp9: ${videoElement?.canPlayType('video/webm;codecs="vp9"')}`);
		// NB has to be single quotes with double quotes round the codec e.g. "vp9"
		if (
			typeof videoElement?.canPlayType === "function" &&
			videoElement?.canPlayType('video/webm;codecs="vp9"') === "probably"
		) {
			// temporarily force to mp4 not webm
			videoExt = ".mp4";
		} else {
			videoExt = ".mp4";
		}

		console.log(`videoExt: ${videoExt}`);

		videoSource = videoSrcPrt + "-" + videoPixels + videoExt;
		console.log(`videoSource: ${videoSource}`);

		// console.log(`querying for ${queryClass}`);
		// const videoElement = document.querySelector(queryClass);
		// const videoElement = document.querySelector('.video-element--xl');

		function addAutoplay() {
			console.log("addAutoplay function running, it'll only add autoplay if the data-attribute is set by props,");
			console.log("mostly it's just adding the video-element--show class to videoElement");
			// if (windowWidth >= 768 && videoElement) {
			if (videoElement) {
				videoElement.src = videoSource;
				// add event listener that fires when the video is ready to play
				// nah, this will have to go in preloader
				// videoElement.addEventListener("canplay", canPlayCallback);
				// autoplay if videoAutoplay prop is true
				// i.e. if the video is somewhere else on the site other than the home page
				// there won't be a preloader, pass the autoplay prop to this component as 'true'
				// otherwise leave the autoplay to preloader component
				console.log(`dataset.autoplay: ${videoElement.dataset.autoplay}`);
				if (videoElement.dataset.autoplay == "true") {
					videoElement.setAttribute("autoplay", "");
				}

				// temporarily set autoplay as default for testing edge and chrome
				// videoElement.setAttribute("autoplay", "");
				// yep this is definitely the difference between edge and chrome autoplaying or not
				// console.log(`videofullwidth would call setAttribute here`);

				// try adding this class in loader???! nope that's not it
				videoElement.classList.add("video-element--show");
				// videoContainer.classList.add('video-container--reveal');
				console.log(`video-element--show`);
				// console.log(`setting autoplay on ${videoElement.dataset.source}`);

				// setTimeout(logBuffered, 5000);
			}
		}

		window.onload = addAutoplay;

		// function logBuffered() {
		//     console.log(`videoElement.buffered.start: ${videoElement.buffered.start(0)}`);
		//     console.log(`videoElement.buffered.length: ${videoElement.buffered.length}`);
		//     console.log(`videoElement.buffered.end: ${videoElement.buffered.end(0)}`);
		//     console.log(`videoElement.duration: ${videoElement.duration}`);
		//     console.log(`videoElement.src: ${videoElement.src}`);
		// }

		// for manual load for testing
		// document.querySelector('.hero__heading').addEventListener('click', addAutoplay);
	}
</script>

<style define:vars={{ backgroundImage }}>
	/* probably need a container for the video, if only for postion relative */

	.video-container {
		/* parent (.hero) has display flex */
		/* so we can put the background on the container */
		/* then the video can fade in over the top  */

		position: relative;
		/* border: 1px solid blueviolet; */

		flex-grow: 1;

		/* don't need an imageset here, just one 20px jpg */
		/* background-image: -webkit-image-set(var(--backgroundImageSet)); */
		/* background-image: image-set(var(--backgroundImageSet)); */
		background-image: var(--backgroundImage);
		/* background-color: hsl(var(--offwhite)); */
		background-position: top center;
		background-size: cover;

		/* from PictureFullWidth hero__picture */

		/* video doesn't like any of these - probably bc its a flex item */
		/* (it has a container div which is a flex item, unlike the image which has picture) */

		/* width: 100%; */
		/* height: 100%; */
		/* display: block; */

		/* keep as position absolute, even though section-picture__picture is position: relative - trust me */
		/* position: absolute; */
		/* z-index: 0; */
	}

	.video-element {
		/* width and height are very important here! */
		/* without them the video won't scale to fit the container */
		/* so object-fit won't work as intended */
		width: 100%;
		/* height: auto; */
		/* height needs to be 100% or it won't overflow horizontally on mobile (portrait) */
		/* it'll just scale to be wide enough to fit the display */
		height: 100%;

		/* The <video> element is a replaced element â€” its display value is inline */
		display: block;
		object-fit: cover;

		/* to keep the video horizontally centered but starting from the top */
		position: absolute;
		/* position: relative; */
		top: 0;
		left: 50%;
		/* left: 520px; */
		transform: translateX(-50%);

		/* bg has to go on element, not container */

		/* border: 1px solid fuchsia; */
		/* background-color: hotpink; */

		opacity: 0;
		transition: opacity 0.5s ease-in;

		/* will-change: opacity; */

		/* from pictureFullWidth hero__image */
		max-width: initial; /* keep this in for now, can't remember what it's doing! */
		/* width: 100%; */
		/* height: 100%; */
	}

	.video-element--show {
		opacity: 1;
	}
</style>
