---
export interface Props {
	videoBase: string;
	videoAutoplay?: string;
	pictureClasses?: string; // e.g. hero__picture
}

const { videoBase, videoAutoplay = "true", pictureClasses = "" } = Astro.props;

const videoSourcePart = `/video/${videoBase}`;

// let's try the 20px blurred image thing
// just so there's not a big blank space while the video loads
// doesn't need to be an imageset, just a single image
const backgroundImage = `url(/images/${videoBase}-20x11.jpg)`;
---

<!-- 

- NB autoplay getting set with js below, leave it off here  
- preload=none will stop browser downloading any part of the 
  video unless it has to i.e. when autoplay is set by the js 

-->
<div class="video-container">
	<video class="video-element" data-source={videoSourcePart} data-autoplay={videoAutoplay} muted loop playsinline>
		<p>Your browser doesn't support HTML video.</p>
	</video>
</div>

<script>
	// this script will run regardless of the conditional render in Hero component
	// and there's quite a lot of it, so put all of it inside a condition

	if (document.querySelector(".video-element")) {
		console.log(`video component script actually running!!`);

		// use a window.innerWidth to target the right video element
		const windowWidth: number = window.innerWidth;
		const videoElement: HTMLVideoElement = document.querySelector(".video-element");
		const videoSrcPrt = videoElement.dataset.source;
		let videoSource: string;
		let videoPixels: string;
		let videoExt: string;

		// 360p was a bit crappy even at 400vw
		// the number is the height of the video btw
		if (windowWidth < 992) {
			videoPixels = "540p";
		} else if (windowWidth < 1200) {
			videoPixels = "720p";
		} else {
			videoPixels = "1080p";
		}

		console.log(`Canplaytype(): ${typeof videoElement?.canPlayType}`);
		// with codec not specified, logs "maybe" on firefox, chrome, edge
		console.log(`Can play webm: ${videoElement?.canPlayType("video/webm")}`);
		// with codec specified, logs "probably" on firefox, chrome, edge
		console.log(`Can play webm codecs=vp9: ${videoElement?.canPlayType('video/webm;codecs="vp9"')}`);
		// NB has to be single quotes with double quotes round the codec e.g. "vp9"
		if (
			typeof videoElement.canPlayType === "function" &&
			videoElement.canPlayType('video/webm;codecs="vp9"') === "probably"
		) {
			videoExt = ".webm";
		} else {
			videoExt = ".mp4";
		}

		videoSource = videoSrcPrt + "-" + videoPixels + videoExt;
		console.log(`videoSource: ${videoSource}`);

		// temporarily log all this to the screen for testing iOS
		// const videoStatus = document.querySelector(".video-status");
		// videoStatus.innerHTML = ``;
		// videoStatus.innerHTML += `<p>Video Source: ${videoSource}</p>`;
		// videoStatus.innerHTML += `<p>Video Ext: ${videoExt}</p>`;
		// videoStatus.innerHTML += `<p>Can play webm/vp9: ${videoElement?.canPlayType('video/webm;codecs="vp9"')}`;

		// console.log(`querying for ${queryClass}`);
		// const videoElement = document.querySelector(queryClass);
		// const videoElement = document.querySelector('.video-element--xl');

		function addAutoplay() {
			// add autoplay if the data-attribute is set by props
			// i.e. if the video is somewhere else on the site other than the home page
			// there won't be a preloader, pass the autoplay prop to this component as 'true'
			// otherwise leave the play() to preloader component
			console.log(`dataset.autoplay: ${videoElement.dataset.autoplay}`);
			if (videoElement.dataset.autoplay == "true") {
				videoElement.setAttribute("autoplay", "");
			}
		}

		function setSource() {
			videoElement.src = videoSource;
			// fade-in the video
			videoElement.classList.add("video-element--show");
		}

		window.onload = () => {
			setSource();
			addAutoplay();
		};
	} // end if
</script>

<style define:vars={{ backgroundImage }}>
	/*
	.video-status {
		color: white;
		background-color: var(--accent);
		position: absolute;
		top: 0;
		left: 0;
		padding: 1rem;
		z-index: 1000;
	}
	*/

	/* probably need a container for the video, if only for postion relative */

	.video-container {
		/* parent (.hero) has display flex */
		/* so we can put the background on the container */
		/* then the video can fade in over the top  */

		position: relative;
		/* border: 1px solid blueviolet; */

		flex-grow: 1;

		/* don't need an imageset here, just one 20px jpg */
		/* background-image: -webkit-image-set(var(--backgroundImageSet)); */
		/* background-image: image-set(var(--backgroundImageSet)); */
		background-image: var(--backgroundImage);
		/* background-color: hsl(var(--offwhite)); */
		background-position: top center;
		background-size: cover;

		/* from PictureFullWidth hero__picture */

		/* video doesn't like any of these - probably bc its a flex item */
		/* (it has a container div which is a flex item, unlike the image which has picture) */

		/* width: 100%; */
		/* height: 100%; */
		/* display: block; */

		/* keep as position absolute, even though section-picture__picture is position: relative - trust me */
		/* position: absolute; */
		/* z-index: 0; */
	}

	.video-element {
		/* width and height are very important here! */
		/* without them the video won't scale to fit the container */
		/* so object-fit won't work as intended */
		width: 100%;
		/* height: auto; */
		/* height needs to be 100% or it won't overflow horizontally on mobile (portrait) */
		/* it'll just scale to be wide enough to fit the display */
		height: 100%;

		/* The <video> element is a replaced element â€” its display value is inline */
		display: block;
		object-fit: cover;

		/* to keep the video horizontally centered but starting from the top */
		position: absolute;
		/* position: relative; */
		top: 0;
		left: 50%;
		/* left: 520px; */
		transform: translateX(-50%);

		/* bg has to go on element, not container */

		/* border: 1px solid fuchsia; */
		/* background-color: hotpink; */

		opacity: 0;
		transition: opacity 0.5s ease-in;

		/* will-change: opacity; */

		/* from pictureFullWidth hero__image */
		max-width: initial; /* keep this in for now, can't remember what it's doing! */
		/* width: 100%; */
		/* height: 100%; */
	}

	.video-element--show {
		opacity: 1;
	}
</style>
