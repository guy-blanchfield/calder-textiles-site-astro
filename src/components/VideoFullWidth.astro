---

// what props will we need for the video?

// imageBase can be used to create the filename for 2 sources
// call the prop 'videoBase' but it takes the imageBase that gets 
// drilled through Hero from whichever page calls it
// probably do an mp4 and webm

// no alt required for video

//  use PictureClasses for video class

// maybe we'll need props for autoplay, loop, probably not muted



export interface Props {
    videoBase: string;
    pictureClasses?: string; // e.g. hero__picture
}

const { videoBase, pictureClasses = '' } = Astro.props;


const videoSourcePart = `/video/${videoBase}`
const videoSourceWebm = `/video/${videoBase}-1080p.webm`
const videoSourceMp4 = `/video/${videoBase}-1080p.mp4`


// we only need a background image for video if it's mobile (<768)
// so the background image only needs to be about 768 width, use the 960x540 for now

// not sure how the hero's gonna look on mobile yet, aspect-wise

const backgroundImageSet = `url(/images/${videoBase}-960x540.webp) type("image/webp"), url(/images/${videoBase}-960x540.jpg) type("image/jpeg")`;
// const backgroundImageSet = `url(/images/${videoBase}-1920x1088.webp) type("image/webp"), url(/images/${videoBase}-960x540.jpg) type("image/jpeg")`;

---


    <!-- NB autoplay getting set with js below, leave it off here -->
    <!-- preload=none will stop browser downloading any part of the video unless it has to -->
    <!-- i.e. when autoplay is set by the js -->

    <video class="video-element" preload="none" data-source={videoSourcePart} muted loop>

        <!-- <source src={videoSourceMdWebm} type="video/webm" /> -->
        <source src={videoSourceMp4} type="video/mp4" />

        <p>Your browser doesn't support HTML video.</p>
    
    </video>


<script>

    // how to display different sized video according to window size
    // ideas?!
    // because autoplay is set to off to start with
    // it should be possible to write multiple video tags
    // have most hidden in css, but use media queries to show the appropriate video

    // then use a window.innerWidth in the autoplay function to target the right video element
    // maybe move the const declaration inside the function

    // use the bootstrap breakpoints to label the elements (see above)

    //  might need a on resize function
    
    // from https://www.smashingmagazine.com/2021/02/optimizing-video-size-quality/
    // to stop video loading at all if it's mobile
    // hopefully will just show the background instead

    const windowWidth: number = window.innerWidth;
    const videoElement: HTMLVideoElement = document.querySelector('.video-element');
    // const altVideoElement: Element = document.querySelector('.video-element');
    const videoSrcPrt = videoElement.dataset.source;
    let queryClass: string;
    let videoSource: string;
    let videoPixels: string;
    let videoExt: string;

    if (windowWidth < 992) {
        // queryClass = '.video-element--md';
        videoPixels = '1080p';
    } else if (windowWidth < 1200) {
        // queryClass = '.video-element--lg';
        videoPixels = '1080p';
    } else {
        // queryClass = '.video-element--xl';
        videoPixels = '1080p';
    }

    console.log(`videoPixels: ${videoPixels}`);

    if (videoElement.canPlayType("video/webm") === 'probably') {
        videoExt = '.webm';
    } else {
        videoExt = '.mp4';
    }

    console.log(`videoExt: ${videoExt}`);

    videoSource = videoSrcPrt + '-' + videoPixels + videoExt;
    console.log(`videoSource: ${videoSource}`);

    // console.log(`querying for ${queryClass}`);
    // const videoElement = document.querySelector(queryClass);
    // const videoElement = document.querySelector('.video-element--xl');

    function addAutoplay() {

        console.log('addAutoplay');
        if (windowWidth >= 768) {
            videoElement.src = videoSource;
            videoElement.setAttribute('autoplay','');
            // videoElement.classList.add('video-element--show');
            console.log(`setting autoplay on ${videoElement.dataset.source}`);
        };
    }

    window.onload = addAutoplay;

    // for manual load for testing
    // document.querySelector('.hero__heading').addEventListener('click', addAutoplay);

</script>

<style define:vars={{backgroundImageSet}}>

/* probably need a container for the video, if only for postion relative */

.video-container {
    position: relative;
    /* border: 1px solid blueviolet; */
}

.video-element {

    /* width and height are very important here! */
    /* without them the video won't scale to fit the container */
    /* so object-fit won't work as intended */
    width: 100%;
    height: auto;

    min-width: 100%;
    min-height: 100%;
    /* The <video> element is a replaced element â€” its display value is inline */
    display: block;
    object-fit: cover;

    /* to keep the video horizontally centered but starting from the top */
    position: absolute;
    /* position: relative; */
    top: 0;
    left: 50%;
    /* left: 520px; */
    transform: translateX(-50%);

    /* bg has to go on element, not container */
    background-image: image-set(var(--backgroundImageSet));
    background-position: top center;
    background-size: cover;
    /* border: 1px solid fuchsia; */
    /* background-color: hotpink; */
}

/* :is(.video-element--md, .video-element--lg, .video-element--xl) {
    display: none;
} */

/* display block utility */
/* probably use this for showing hiding on window resize */
/* .video-element--show {
    display: block;
} */



</style>