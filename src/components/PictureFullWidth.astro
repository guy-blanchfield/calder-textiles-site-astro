---
// needs a class for the picture element AND a class for the img element inside
// (it's not just a fallback - its the img element that displays the image)

// named them somethingClasses just in case we need more than one
// at the moment we're only using one

// we don't want the browser trying to dowwnload a portrait image if it's not required
// i.e. if it's the body picture element (currently section-bigpicture) not the hero picture
// we can't just use a css media query to hide the big picture section on mobile, because the browser might have started
// trying to download it by the time it parses the css
// so we need to have some conditional in this component so that the portrait stuff isn't included

// ok, we have a conditional for lazy loading, so the hero image can load eagerly
// and any full width pictures in the body can lazy load, therefore not downloading immediately
// and so when the css loads and sets display:none for mobile, modern browsers won't download it at all
// hopefully!

export interface Props {
	imageBase: string;
	imageAlt?: string;
	pictureClasses: string; // e.g. hero__picture
	imageClasses: string; // e.g. hero__image
	// includePortrait?: boolean;
	lazyLoad?: boolean;
	// might as well have a prop for the fade transition time
	// that will go into a data-attribute
	// it will be used in the css to set duration of the fade in when the image or video is ready to display
	// and also to set the timeout duration of handleHeroTextTransition() (in initialise.ts)
	// i.e. the hero text fade-up has to wait for the image or video fade-in to finish
	transitionDuration?: string; // properties of dataset are strings
	transitionDelay?: string;
}

// think lazyLoad should be true as default, only the hero picture needs to eager load

const {
	imageBase,
	imageAlt = "",
	pictureClasses,
	imageClasses,
	lazyLoad = true,
	transitionDuration = "300ms", // these don't affect lighthouse score
	transitionDelay = "100ms", // so set them to whatever looks best
} = Astro.props;

// just create the whole string for each srcset
// it'll be way tidier than creating objects and arrays to generate the the string dynamically
// see scripts/srcset-stuff.js for the long winded option

// NB these images all have to go in public!

// const portraitSrcset = !includePortrait ? `/images/blank-1px.png` : `/images/${imageBase}-portrait-540x960.jpg 540w, /images/${imageBase}-portrait-810x1440.jpg 810w, /images/${imageBase}-portrait-1080x1920.jpg 1080w`;
const portraitSrcset = `/images/${imageBase}-portrait-540x960.jpg 540w, /images/${imageBase}-portrait-810x1440.jpg 810w, /images/${imageBase}-portrait-1080x1920.jpg 1080w`; // 9:16
const portraitSrcsetWebp = `/images/${imageBase}-portrait-540x960.webp 540w, /images/${imageBase}-portrait-810x1440.webp 810w, /images/${imageBase}-portrait-1080x1920.webp 1080w`; // 9:16
//const landscapeSrcset = `/images/${imageBase}-960x720.jpg 960w, /images/${imageBase}-1440x960.jpg 1440w, /images/${imageBase}-1920x1440.jpg 1920w, /images/${imageBase}-2400x1600.jpg 2400w`; //4:3
// largest 2360x1330
// largest 2560x1440
// const landscapeSrcset = `/images/${imageBase}-960x540.jpg 960w, /images/${imageBase}-1440x810.jpg 1440w, /images/${imageBase}-1920x1080.jpg 1920w, /images/${imageBase}-2560x1440.jpg 2560w`; // 16:9
// largest 2360x1330
// try leaving the the highest resolution out, just for better lighthouse performance score
// 1920 is good enough resolution on a 3840x2400 screen, and performance score is 97, so keep like this for the time being
// const landscapeSrcset = `/images/${imageBase}-960x540.jpg 960w, /images/${imageBase}-1440x810.jpg 1440w, /images/${imageBase}-1920x1080.jpg 1920w, /images/${imageBase}-2360x1330.jpg 2560w`; // 16:9
const landscapeSrcset = `/images/${imageBase}-960x540.jpg 960w, /images/${imageBase}-1440x810.jpg 1440w, /images/${imageBase}-1920x1080.jpg 1920w`; // 16:9
// const landscapeSrcsetWebp = `/images/${imageBase}-960x540.webp 960w, /images/${imageBase}-1440x810.webp 1440w, /images/${imageBase}-1920x1080.webp 1920w, /images/${imageBase}-2360x1330.webp 2560w`; // 16:9
const landscapeSrcsetWebp = `/images/${imageBase}-960x540.webp 960w, /images/${imageBase}-1440x810.webp 1440w, /images/${imageBase}-1920x1080.webp 1920w`; // 16:9
// largest 2560x1440
// const landscapeSrcsetWebp = `/images/${imageBase}-960x540.webp 960w, /images/${imageBase}-1440x810.webp 1440w, /images/${imageBase}-1920x1080.webp 1920w, /images/${imageBase}-2560x1440.webp 2560w`; // 16:9

const fallbackSrc = `/images/${imageBase}-960x540.jpg`;
// const fallbackSrc = `/images/${imageBase}-1920x1080.jpg`;

// need to create image path variable to pass into style
// using define:vars
// for the 20px blurry background-image, that shows while the big picture is loading
// it's used as a background-image on section-picture__picture (see the style section below)

// no portrait versions for the picture section so the 20px version will always 20x11 (16x9)
// this'll probably have to go in public

// NB has to be the whole background-image value - url() and all

// image-set - remember to put the best format first it'll use the first compatible format it comes across
// const backgroundImageSet = `url(/images/${imageBase}-50x28.webp) type("image/webp"), url(/images/${imageBase}-50x28.jpg) type("image/jpeg")`;
// tried 50px images - nah, 20 probably better

// the 20px background images are so small, there's no point having a webp as well as jpg
// const backgroundImageSet = `url(/images/${imageBase}-20x11.webp) type("image/webp"), url(/images/${imageBase}-20x11.jpg) type("image/jpeg")`;
// const backgroundImageSet = `url(/images/${imageBase}-20x11.jpg) type("image/jpeg")`;

// in which case there's no need for imageset, just use background-image to stack/layer
// two images, one 20px (tiny, really blurred), one the LQIP
// the tiny one will load first, the lqip will replace it (layer over the top of it) as soon as it's loaded

//  if we want to set background image conditionally, e.g different bg images for Hero and pictureSection
// we should be able to use the pictureClasses prop
// in the Hero component pictureClasses will contain 'hero__picture'
// in the pictureSection component pictureClasses will contain 'section-picture__picture'

/*
const backgroundImage = pictureClasses.includes("hero")
	? `url(/images/${imageBase}-lqip-blur.jpg)`
	: `url(/images/${imageBase}-20x11.jpg)`;
*/

// think we're just going to use the blur for both hero and pictureSection, at least for now
// consider using filter blur, then we could just use a really low quality version of the image
// and blur it in the browser, caniuse says 97.7% for filter blur so give it a go

const backgroundImage = `url(/images/${imageBase}-lqip.jpg)`;

// don't we need a different lqip for portrait though?
// otherwise when the hq image fades in it'll be a mismatch
// - tested this and yes, we do need a portrait lqip!

const backgroundImagePortrait = `url(/images/${imageBase}-portrait-lqip.jpg)`;

// const backgroundImageTiny = `url(/images/${imageBase}-20x11.jpg)`;
// const backgroundImageLQIP = `url(/images/${imageBase}-lqip-blur.jpg)`;

// import testHeroImage from "../images/test-cream-yarn-2360x1330.webp";
---

<!-- <img src={testHeroImage} alt="Testing the hero image" width="2360" height="1330" class="test-hero-image" /> -->
<picture class:list={pictureClasses} data-imagebase={imageBase}>
	<!-- just use media min-width for now -->
	<!-- add something for orientation (e.g. media="(orientation: portrait)") eventually -->

	<!-- see: https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images -->
	<!-- probably want to do something like: -->

	<!-- <source media="(orientation: portrait)" srcset=".assets/images/{someimage}-portrait-320.jpg, {someimage}-portrait-480.jpg 1.5x, {someimage}-portrait-640.jpg 2x" > -->
	<!-- <source media="(max-width: 1200px)" srcset="./assets/images/{someimage}-320.jpg, {someimage}-480.jpg 1.5x, {someimage}-640.jpg 2x" > -->

	<!-- maybe you don't need the media orientation explicitly, just assume it from the min/max-width -->
	<!-- just remember that srcset takes multiple files, for multiple display resolutions -->

	<!-- more about the picture issue from a well regarded article by jason grigsby -->
	<!-- https://cloudfour.com/thinks/responsive-images-101-part-3-srcset-display-density/ -->

	<!-- "The moment you move beyond providing alternate densities of a fixed width img element, the display density descriptor becomes unwieldy and inadequate to the task." -->
	<!-- so density descriptor is a no-no then -->

	<!-- NB on tests with this laptop (density 2.5x) the image with the 3x descriptor is the chosen over 1x, but 2x is chosen over 3x -->
	<!-- 1.5x is chosen over 1x, 3x is chosen over 1.5, 2.5 over 3x -->

	<!-- on tests with this laptop (density 2.5px) at 1500 viewport, 2880w is chosen over 1440w -->
	<!-- at 400 viewport, 1440w is chosen (it's looking for an image 2.5 x 400 so 1000px, and 1440 is big enough) -->
	<!-- it should choose the 2880w if viewport gets bigger than 576 (at the point where 1440 isn't enough (1440/2.5 = 576)) Yep! -->

	<!-- So, as long as we provide 2 or 3 different resolution images for both orientations -->
	<!-- it probably doesn't matter whether we use density descriptor or width descriptor -->
	<!-- width probably easiest to deal with -->

	<!-- For portrait it's probably always going to be mobiles, so for a full width image we need say 400, 800, maybe 1200  -->
	<!-- typical aspect ratio for smart phones is 9:16 - 9:20 -->

	<!-- using portrait images on viewports between 576 and 768 looks weird and wrong -->
	<!-- so use an 'and' here to specify a min-width condition -->
	<!-- viewports that are portrait and between 576 and 768 will get the fallback image -->
	<!-- edit: 29-11-2023 -->
	<!-- not sure what all that min-width was supposed to be doing -->
	<!-- (it was only min-width 768 anyway, no sign of the 576?!) -->
	<!-- (for info, the media attribute was (orientation: portrait) and (min-width: 768px)) -->
	<!-- anyway, let's just leave it at orientation: portrait for now, see how it goes -->

	<!-- if you change the media queries here, remember to update the querySelectors in the script -->

	<source media="(orientation: portrait)" data-srcset={portraitSrcsetWebp} type="image/webp" />
	<source media="(orientation: portrait)" data-srcset={portraitSrcset} type="image/jpeg" />

	<!-- because this is picture so there's no 'sizes', browser will assume the image to be 100vw (correctly in this case!) -->
	<!-- so we probably don't need any other media query, just let the browser select the best image based on the device pixel density -->

	<!-- query here was originally min-width: 768px, but that meant that at landscape orientations less than 768 -->
	<!-- no image at all was shown (why the fallback image didn't apply, who knows? duh the jpgs hadn't been created! should work now) -->
	<!-- either way, try orientation: landscape instead -->

	<!-- right, think we're gonna try setting the srcset attribute with the script -->
	<!-- so we can gain more control over the image loading -->
	<!-- (firefox kept waiting for the image to load before running the script!) -->

	<!-- <source media="(orientation: landscape)" srcset={landscapeSrcsetWebp} type="image/webp" /> -->
	<!-- <source media="(orientation: landscape)" srcset={landscapeSrcset} type="image/jpeg" /> -->
	<source media="(orientation: landscape)" type="image/webp" data-srcset={landscapeSrcsetWebp} />
	<source media="(orientation: landscape)" type="image/jpeg" data-srcset={landscapeSrcset} />

	<!-- <source srcset="./assets/images/${heroImage}-1440x960.jpg 2880w, ./assets/images/${heroImage}-2000x1333.jpg 1440w" media="(min-width: 100px)"> -->
	<!-- <source srcset="./assets/images/${heroImage}-1440x960.jpg" media="(min-width: 1200px)"> -->

	<!-- the fallbackSrc will apply to anything under 768 wide and orientation landscape -->
	<!-- the loading=lazy will stop the browser immediately downloading its chosen image -->
	<!-- which should give the css time to parse and set display to none -->

	<!-- in tests so far, with loading=lazy and display:none: -->
	<!-- firefox doesn't download the image -->
	<!-- chrome doesn't download the image -->
	<!-- edge doesn't download the image -->

	<!-- width and height settings to aid lazy loading -->
	<!-- fallbacksrc is 960x540 so try that -->
	<!-- think we'll have to set fallback in script otherwise browsers will try to download it -->
	<!-- bc the source srcset doesn't get set until the script runs -->
	<!-- we'll have to include that as a data attribute as well -->

	<!-- if we don't go to the blur-loading stage the transitionDuration attribute has to get set to 0 somehow -->

	<img
		alt={imageAlt}
		class:list={imageClasses}
		loading={lazyLoad ? "lazy" : "eager"}
		data-transition-duration={transitionDuration}
		data-transition-delay={transitionDelay}
		data-src={fallbackSrc}
		width="960"
		height="540"
	/>
</picture>

<!-- define:vars makes scripts inline, pass the vars as data-attributes instead -->
<script>
	console.log("PFW Script running!");

	// import { Image } from "astro:assets";

	// wait for the image to load, then transition the opacity
	// think this script will only run once, not once for each instance of the component
	// so grabs the img inside all pictures with class picture--blur-load

	// for when you want to do the fancy promises version
	// https://stackoverflow.com/questions/62603102/determine-if-an-image-is-cached-in-browser-either-memory-or-disk-cache-before

	const pictureElements: NodeListOf<HTMLPictureElement> = document.querySelectorAll(".picture--blur-load");

	// right, think we need to cover the following possibilities:
	// - image is in memory cache and so image.complete will be true when we check (get --show)
	// - image is in disk cache so in image.complete will be false but the image will load in a moment (get ---show)
	// - image is downloading so we will need the blur-loading class (get --blur-loading)
	// -- NB the --blur-loading path will have to set another eventListener for load

	// so the structure of the condition is something like:
	// if image.complete (or image.naturalWidth) is false,
	// set a timeout that gets --blur-loading within 25ms
	// if image load event hasn't fired
	// if it has, clear the timeout and get --show

	// so in theory when cache is on, throttling off
	// it will always be 'image already complete, --show'
	// or 'load event happened within 25ms --show'

	// and with cache off, throttling on it will always be
	// 'image not complete, --blur-loading'

	// NB! This is the case for chrome and edge, but NOT for firefox...
	// because in the current setup (scripts here in pictureFullWidth)
	// firefox wants to download the whole image before it runs the script
	// so image.complete is always true

	// so, either move the script (e.g. to layout)
	// or ensure a reliable fallback/ failsafe

	// function to execute when image is ready
	function showImage(pictureEl: HTMLPictureElement, heroLoader: Element, heroOverlay: Element) {
		console.log("showImage function called for ", pictureEl);

		pictureEl.classList.add("picture--show");
		// should we be removing picture--blur-loading here? unnecessary?

		// remove loading animation
		if (heroLoader) {
			heroLoader.classList.remove("loader--loading");
		}

		// show the hero overlay (the gradient shading thing for hero images) if it's a hero image
		if (heroOverlay) {
			// --show might already be present if this image has done the blur-loading thing
			// but classList is smart enough not to add things twice
			heroOverlay.classList.add("hero__overlay--show");
		}
	}

	// think we should have a function for loading the background image - it's a bit fiddly
	function loadBGImage(pictureEl: HTMLPictureElement) {
		// get imagebase from data attribute (we'll use this to create the path to the lqip background image)
		const imageBase = pictureEl.dataset.imagebase;
		// check for portrait or fall back to landscape
		let backgroundImageSrc: string;
		if (window.matchMedia("(orientation: portrait)").matches) {
			backgroundImageSrc = `/images/${imageBase}-portrait-lqip.jpg`;
		} else {
			backgroundImageSrc = `/images/${imageBase}-lqip.jpg`;
		}

		// now we need to create an img element and load the background image into it
		// so we can monitor its loading
		// when it's loaded we know we can use it as background image
		let preloadedBGImage = document.createElement("img");
		preloadedBGImage.addEventListener("load", () => {
			pictureEl.style.backgroundImage = `url(${backgroundImageSrc})`;
			pictureEl.classList.add("picture--bg-loaded");

			// get rid of the preloaded img element
			preloadedBGImage = null;
		});
		// now the event listener's set up, set the src (start loading the image)
		preloadedBGImage.src = backgroundImageSrc;
	}

	// pictureElements.forEach((pictureEl) => {
	for (const pictureEl of pictureElements) {
		// first get a ref to the loading animation (in hero - the parent element if this is a hero picture)
		// bc we're going to need it twice (if this is a hero picture)
		const heroLoader = pictureEl.parentNode.querySelector(".hero__loader-container")?.querySelector(".loader");
		//  same for the overlay
		const heroOverlay = pictureEl.parentNode.querySelector(".hero__overlay");

		// select picture source by media and by type

		const sourcePortraitWebp: HTMLSourceElement = pictureEl.querySelector(
			'[media="(orientation: portrait)"][type="image/webp"]'
		);
		const sourcePortraitJpeg: HTMLSourceElement = pictureEl.querySelector(
			'[media="(orientation: portrait)"][type="image/jpeg"]'
		);
		const sourceLandscapeWebp: HTMLSourceElement = pictureEl.querySelector(
			'[media="(orientation: landscape)"][type="image/webp"]'
		);
		const sourceLandscapeJpeg: HTMLSourceElement = pictureEl.querySelector(
			'[media="(orientation: landscape)"][type="image/jpeg"]'
		);

		// get srcset from data attribute
		sourcePortraitWebp.srcset = sourcePortraitWebp.dataset.srcset;
		sourcePortraitJpeg.srcset = sourcePortraitJpeg.dataset.srcset;
		sourceLandscapeWebp.srcset = sourceLandscapeWebp.dataset.srcset;
		sourceLandscapeJpeg.srcset = sourceLandscapeJpeg.dataset.srcset;

		// for typescript typing...
		// MDN: The returned timeoutID is a positive integer value which identifies the timer created by the call to setTimeout().
		let imgLoadTimer: number;
		// how long to wait before initiating the blur-load process
		const imgLoadTimerDuration: number = 25;
		const pictureImg = pictureEl.querySelector("img");

		// first of all, grab the data duration attribute then set it to 0
		// if we go to the blur-loading stage we'll set it back to its original value
		const transitionDuration = pictureImg.dataset.transitionDuration;
		// "0" will do it but go with "0ms" just for consistency
		pictureImg.dataset.transitionDuration = "0ms";

		// once the source srcset is set, it's probably safe to set the src.. yep!
		pictureImg.src = pictureImg.dataset.src;

		// can't rely on .complete and naturalWidth because they might return false
		// even if image is in cache
		// (chrome seems to return false unless the image is in memory cache as opposed to disk cache)

		//  so we need to give the browser a few milliseconds to load the image, before we go to the blur-loading

		//  check complete and naturalWidth first
		//  if either .complete or naturalWidth is false, assume the image is not yet loaded
		if (!(pictureImg?.complete && pictureImg.naturalWidth)) {
			// set timeout that will do the blur loading thing (if the load event hasn't fired within 25ms)
			imgLoadTimer = setTimeout(() => {
				console.log("timeout! so doing the blur load thing");
				// clear the timeout and null it
				console.log("clearing the timeout");
				clearTimeout(imgLoadTimer);
				imgLoadTimer = null;
				console.log("value of timeout is: ", imgLoadTimer);
				console.log(`${pictureImg.src} is NOT complete so adding picture--blur-loading`);
				// if we're going through the blur-loading process we need to set the duration data attribute to its original
				// value, so that the heroTextTransition can calculate the right duration for its transition
				pictureImg.dataset.transitionDuration = transitionDuration;
				console.log(`data-transition-duration: ${pictureImg.dataset.transitionDuration}`);
				pictureEl.classList.add("picture--blur-loading");
				// now add the lqip background image (it only needs to be applied to picture--blur-loading picture elements)
				loadBGImage(pictureEl);
				// now that blur-loading has been added, we can allow the event listener to continue waiting for load
				// it will add --show when the image loads

				// not all pictures will be in hero (duh!) so we need to check that the parent has the loader-container
				// before we add the loading animation (non-hero pictures don't need the loading animation)

				// (if the loader seems like it's taking a long time to appear with Slow 3G throttling, it's because
				// the script takes a long time to start, not because of where the loader--loading class is added
				// in the script - i.e. it's fine here!

				if (heroLoader) {
					console.log("parent element loader container is: ", heroLoader);
					// add loading animation
					console.log("adding the loading animation");

					heroLoader.classList.add("loader--loading");
				}

				// show the hero overlay (the gradient shading thing for hero images) if it's a hero image
				if (heroOverlay) {
					heroOverlay.classList.add("hero__overlay--show");
				}
			}, imgLoadTimerDuration);

			// add listener for the load event
			pictureImg.addEventListener("load", () => {
				// if this fires before the timeout, we're assuming the image was cached and its cool to show it
				// without going through the blur-loading process (i.e. no background image lqip and no filter blur)
				// so clear the timeout...
				if (imgLoadTimer) {
					console.log("load event beat the timeout: " + imgLoadTimer + ", image was probably cached");
					// clear the timeout and null it
					console.log("clearing the timeout because load event beat the timeout");
					clearTimeout(imgLoadTimer);
					imgLoadTimer = null;
				}
				// should probably have a function for adding --show
				console.log("load event fired so doing the show picture thing for: ", pictureImg);
				// ...then show the image
				showImage(pictureEl, heroLoader, heroOverlay);
			});

			// otherwise we can assume the image has already loaded
		} else {
			console.log(`pictureImg.complete: ${pictureImg.complete}`);
			console.log(`pictureImg.naturalWidth: ${pictureImg.naturalWidth}`);
			console.log("image is already complete so adding --show");
			showImage(pictureEl, heroLoader, heroOverlay);
		}
	}
</script>

<style define:vars={{ backgroundImage, backgroundImagePortrait, transitionDuration, transitionDelay }}>
	/* firstly, lets have 100% width and height, and display block for the picture elements */
	/* definitely need the width and height to make the picture */
	/* (and hence the image) fill its container (section-picture or hero) */

	.hero__picture,
	.section-picture__picture {
		width: 100%;
		height: 100%;
		/* display: block replaced by vertical-align in the reset (added 12-11-2023) */

		/* tried doing this as flex-grow: 1 (like the video container div), problematic, leave as is */
	}

	.hero__picture,
	.section-picture__picture {
		/* keep as position absolute, even though section-picture__picture is position: relative - trust me */
		position: absolute;
		z-index: 0;
	}

	/* narrower screens need section-picture__picture to be relative so the image can shrink */
	/* see the media query in pictureSection (min-width 992) for the min-height stuff */
	/* 992 is where it goes to a 2 column layout so it makes sense to put the query there */
	@media (max-width: 991px) {
		.section-picture__picture {
			/* keep as position: relative - trust me */
			position: relative;
		}
	}

	.hero__image,
	.section-picture__image {
		/* no pointer events because it's a background */
		pointer-events: none;
		/* max-width should be taken care of by the reset (added 12-11-2023) */
		/* max-width: initial; */
		width: 100%;
		height: 100%;

		/* https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit */

		/* "The object-fit CSS property sets how the content of a replaced element, such as an <img> or <video>, should be resized to fit its container." */
		/* container in the case of a replaced element is the img or video box itself NOT the parent */
		/* so you set some dimensions for the <img> and object fit determines how the actual image gets stretched or scaled to fit into its box */
		/* that's why the element needs width and height setting */

		/* so what we're doing here is telling the <img> to be the width and height of its parent */
		/* then telling the image how to fit into that <img> box using the object-fit rule */

		object-fit: cover;
	}

	/* any picture element that we want to be preloaded, with blurred bg and pulsing overlay is given the class 'picture--blur-load' */
	/* so it can be applied to hero image as well as section image */
	/* we can apply it by passing it as a prop (pictureClasses) to the pictureFullWidth component into the classlist*/

	/* 'picture--blur-load' sets opacity to 0 and identifies the element to the querySelectorAll */
	/* so it gets put into the nodelist (pictureElements) */

	/* another class called 'picture--blur-loading' is added by js once we've checked that the image isn't already loaded */
	/* this adds: */
	/*  - lqip as bg image  */
	/*  - filter blur */
	/*  - the pulsing overlay (using ::before) */
	/* (we also add a class 'picture--bg-loaded' when the bg lqip image is ready to use) */

	/* bc we don't want the blurred bg or transition or the pulsing overlay if the image is already loaded */

	/* if the image is already loaded OR when the img load event fires, 'picture--show is added' */
	/* this sets opacity to 1, which shows the image immediately if the picture only has 'picture--blur-load' */
	/* OR fades the image in if the picture has had 'picture--blur-loading' added */

	/* NB hero images *are* using the picture--blur-load class */
	/* but the blur bg image is hardly ever seen because the hero images preload */
	/* i.e. they're not lazy loaded, so they've usually loaded by the time the scripts get going */
	/* tested this plenty and the blur bg *will* be applied if the image takes long enough */

	.picture--blur-load {
		/* this class is mostly just to identify the elements that the blur loading
		process is applied to */

		/* both these properties are going to be transitioned so they need to be set at the start
		otherwise the transition will mean that they transition FROM their default values TO these values
		i.e. the image will start off unblur then blur before unblurring */
		/* these are taken off by picture--show, so hopefully if picture--blur-loading *isn't*
		applied they'll be taken off WITHOUT any transition, but the IMG will fade in bc
		picture--blur-load>img has a transition */
		opacity: 0;
		filter: blur(0.5rem);
	}

	.picture--blur-loading {
		/* now doing this with js - see loadBGImage() */
		/* background-image: var(--backgroundImage); */

		background-size: cover;
		/* need background-position so the background-image aligns with the img when it fades in */
		background-position: center center;

		/* set filter here but opacity needs setting earlier 
		- we'll set it in --picture-blur*/

		/* so we need to apply the transition rule in one place, bc if we set it in
		two places, one will overwrite the other */

		/* filter: blur(0.5rem); */

		/* clip-path because the filter: blur bleeds over the previous section */
		clip-path: inset(0);

		/* from MDN: */
		/* The first value that can be parsed as a time is assigned to the transition-duration, 
		and the second value that can be parsed as a time is assigned to transition-delay */
		transition: filter var(--transitionDuration) var(--transitionDelay), opacity 250ms;
	}

	/* the pulsing overlay to indicate that something's happening */
	.picture--blur-loading::before {
		content: "";
		position: absolute;
		/* inset 0 is eqivalent to top 0 right 0 bottom 0 left 0 */
		/* so it fits the element to its parent */
		inset: 0;
		animation: pulsing-bg 2s ease-in-out infinite;
	}

	@keyframes pulsing-bg {
		0% {
			background-color: hsl(var(--white) / 0);
		}
		50% {
			background-color: hsl(var(--white) / 0.1);
		}
		100% {
			background-color: hsl(var(--white) / 0);
		}
	}

	/* the show/hide class has to go on the containing element (picture) not img */
	.picture--blur-load img {
		opacity: 0.01;
		/* delay the filter transition, while we do the opacity transition */
		transition: opacity var(--transitionDelay);
		/* transition: opacity 5000ms; */
	}

	.picture--blur-loading img {
		/* put the transition here if we only want it to fade on images that are loading for the first time */
	}

	/* this class will be added by loadBGImage function in <script> */
	/* NB! this has to be later in the cascade than wherever opacity
	for the picture element is set to 0 */
	.picture--bg-loaded {
		opacity: 1;
	}

	.picture--show {
		/* transition goes here, so it fades out but doesn't fade in */
		/* let's try a delay on this transition (transitionDelay) */
		filter: blur(0rem);
		/* we'll also need to set opacity to 1 here
		in case it hasn't had the picture--bg-loaded class added 
		(i.e. if image was already loaded and didn't go through the blur loading process) */
		opacity: 1;
	}

	.picture--show img {
		opacity: 1;
	}

	/* something to remove the pulsing ::before */
	.picture--show::before {
		animation: none;
	}
</style>
