---
import Hero from "./Hero.astro";
import PictureFullWidth from "./PictureFullWidth.astro";

// some prop drilling required to get the imageBase from the page that calls it
// through to the pictureFullWidth component

export interface Props {
	imageBase: string;
	imageAlt?: string;
	sectionFixedHeight?: boolean;
}

// think we want sectionFixedHeight to default to false for the picture
// it'll always be pretty high / deep because of the aspect ratio of the images
// unless we want to do the object-fit thing on it and have it fit to the min-height

// so we don't really need the wrapper div but keep it for consistency and
// also for if we do the object-fit thing later
// we probably should because the wider the screen, the deeper the image is going to be
// so it could get annoyingly deep to scroll past

// the image has already got an object-fit rule in pictureFullWidth so it shouldn't be too tricky
// to get it working... honest

// when pictureFullWidth is in Hero, its parent is the div with the view height -margin +padding thing
// whereas here that div will be the grandparent so the section-picture div might need some dimensions or flex
// or something to make the object-fit work

const { imageBase, imageAlt = "", sectionFixedHeight = false } = Astro.props;
---

<div class="wrapper" class:list={["wrapper--max-height", { sectionFixedHeight }]}>
	<!-- wrapper div uses the negative margin / padding fiddle to get round using calc with svh. 
		No other padding or margin should be used on it
		if fixedHeight isn't true it'll do nothing at all, just wrap -->
	<section class="section-picture">
		<!-- lazyLoad is true by default, you could leave it out here -->
		<!-- NB! from web.dev https://web.dev/lazy-loading-images/ -->
		<!-- One thing you will want to avoid is lazy loading images that are in the viewport during startup. -->

		<PictureFullWidth
			imageBase={imageBase}
			imageAlt={imageAlt}
			pictureClasses="section-picture__picture picture--blur-load"
			imageClasses="section-picture__image"
			lazyLoad={true}
		/>
	</section>
</div>

<style>
	/* add max-height rule to the section-picture div */
	/* sectionFixedHeight is false by default in pictureSection */

	/* using the same negative margin fiddle as sectionFixedHeight */
	/* but applying it to the section not the wrapper div */
	/* this is all so the image will object-fit (essentially crop to the centre) */
	/* if the min-height is shorter than the image's height in relation to the aspect */

	/* we're basically giving the section-picture the exact same rules as hero */
	/* so the pictureFullWidth in section-picture behaves the same way as pictureFullWidth in hero */

	.section-picture {
		flex: 1;
		display: flex;
	}

	/* we only want the min-height thing on larger screens */
	/* i.e. when the screen is wide enough to make the image deeper than (100vh - header height) */
	/* on narrower screens we want to allow the image to shrink below (100vh - header height) */

	/* see the media query in pictureFullWidth (max-width 991) for the position relative/absolute stuff */
	/* 992 is where it goes to a 2 column layout so it makes sense to put the query there */
	@media (min-width: 992px) {
		.section-picture {
			/* flex: 1; */

			min-height: 100vh;
			min-height: 100svh;
			/* negative margin of the amount we want to subtract */
			margin-top: calc(var(--header-height-calc) * -1);
			/* padding of the amount we want to subtract */
			padding-top: var(--header-height-calc);

			position: relative;
			overflow: hidden;
		}
	}
</style>
